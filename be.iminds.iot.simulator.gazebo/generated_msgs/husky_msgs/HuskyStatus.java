package husky_msgs;

public interface HuskyStatus extends org.ros.internal.message.Message {
  static final java.lang.String _TYPE = "husky_msgs/HuskyStatus";
  static final java.lang.String _DEFINITION = "Header header\n\n# MCU Uptime, in ms\nuint32 uptime\n\n# ROS Control loop frequency (PC-side)\nfloat64 ros_control_loop_freq\n\n# Current draw of platform components, in amps\nfloat64 mcu_and_user_port_current\nfloat64 left_driver_current\nfloat64 right_driver_current\n\n# Voltage of platform components, in volts\nfloat64 battery_voltage\nfloat64 left_driver_voltage\nfloat64 right_driver_voltage\n\n# Component temperatures, in C\nfloat64 left_driver_temp\nfloat64 right_driver_temp\nfloat64 left_motor_temp\nfloat64 right_motor_temp\n\n# Battery capacity (Wh) and charge (%) estimate\nuint16 capacity_estimate\nfloat64 charge_estimate\n\n# Husky error/stop conditions\nbool timeout\nbool lockout\nbool e_stop\nbool ros_pause\nbool no_battery\nbool current_limit\n";
  std_msgs.Header getHeader();
  void setHeader(std_msgs.Header value);
  int getUptime();
  void setUptime(int value);
  double getRosControlLoopFreq();
  void setRosControlLoopFreq(double value);
  double getMcuAndUserPortCurrent();
  void setMcuAndUserPortCurrent(double value);
  double getLeftDriverCurrent();
  void setLeftDriverCurrent(double value);
  double getRightDriverCurrent();
  void setRightDriverCurrent(double value);
  double getBatteryVoltage();
  void setBatteryVoltage(double value);
  double getLeftDriverVoltage();
  void setLeftDriverVoltage(double value);
  double getRightDriverVoltage();
  void setRightDriverVoltage(double value);
  double getLeftDriverTemp();
  void setLeftDriverTemp(double value);
  double getRightDriverTemp();
  void setRightDriverTemp(double value);
  double getLeftMotorTemp();
  void setLeftMotorTemp(double value);
  double getRightMotorTemp();
  void setRightMotorTemp(double value);
  short getCapacityEstimate();
  void setCapacityEstimate(short value);
  double getChargeEstimate();
  void setChargeEstimate(double value);
  boolean getTimeout();
  void setTimeout(boolean value);
  boolean getLockout();
  void setLockout(boolean value);
  boolean getEStop();
  void setEStop(boolean value);
  boolean getRosPause();
  void setRosPause(boolean value);
  boolean getNoBattery();
  void setNoBattery(boolean value);
  boolean getCurrentLimit();
  void setCurrentLimit(boolean value);
}
