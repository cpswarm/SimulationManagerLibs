package create_node;

public interface RawTurtlebotSensorState extends org.ros.internal.message.Message {
  static final java.lang.String _TYPE = "create_node/RawTurtlebotSensorState";
  static final java.lang.String _DEFINITION = "uint8 OI_MODE_OFF = 0\nuint8 OI_MODE_PASSIVE = 1\nuint8 OI_MODE_SAFE = 2\nuint8 OI_MODE_FULL = 3\n\nuint8 REMOTE_LEFT = 129\nuint8 REMOTE_FORWARD = 130 \nuint8 REMOTE_RIGHT = 131 \nuint8 REMOTE_SPOT = 132 \nuint8 REMOTE_MAX = 133 \nuint8 REMOTE_SMALL = 134 \nuint8 REMOTE_MEDIUM = 135 \nuint8 REMOTE_LARGE = 136 \nuint8 REMOTE_CLEAN = 136 \nuint8 REMOTE_PAUSE = 137 \nuint8 REMOTE_POWER = 138 \nuint8 REMOTE_ARC_LEFT = 139 \nuint8 REMOTE_ARC_RIGHT = 140 \nuint8 REMOTE_DRIVE_STOP = 141 \n# Scheduling remote\nuint8 REMOTE_SEND_ALL = 142 \nuint8 REMOTE_SEEK_DOCK = 143 \n# Home base\nuint8 REMOTE_RESERVED = 240 \nuint8 REMOTE_FORCE_FIELD = 242 \nuint8 REMOTE_GREEN_BUOY = 244 \nuint8 REMOTE_GREEN_BUOY_AND_FORCE_FIELD = 246 \nuint8 REMOTE_RED_BUOY = 248 \nuint8 REMOTE_RED_BUOY_AND_FORCE_FIELD = 250 \nuint8 REMOTE_RED_BUOY_AND_GREEN_BUOY = 252 \nuint8 REMOTE_RED_BUOY_AND_GREEN_BUOY_AND_FORCE_FIELD = 254 \nuint8 REMOTE_NONE = 255\n\nuint8 CHARGING_NOT_CHARGING = 0\nuint8 CHARGING_CHARGING_RECOVERY = 1\nuint8 CHARGING_CHARGING = 2\nuint8 CHARGING_TRICKLE_CHARGING = 3\nuint8 CHARGING_WAITING = 4 \nuint8 CHARGING_CHARGING_ERROR = 5\n\nHeader header\n\nuint8 bumps_wheeldrops\nbool wall\nbool cliff_left\nbool cliff_front_left\nbool cliff_front_right\nbool cliff_right\nbool virtual_wall\nuint8 motor_overcurrents\nuint8 dirt_detector_left  #roomba_only\nuint8 dirt_detector_right #roomba_only\nuint8 remote_opcode\nuint8 buttons\nint16 distance  # mm\nint16 angle # degrees\nuint8 charging_state\nuint16 voltage  # mV\nint16 current  # mA\nint8 temperature  # C\nuint16 charge  # mAh\nuint16 capacity  # mAh\n\nuint16 wall_signal\nuint16 cliff_left_signal\nuint16 cliff_front_left_signal\nuint16 cliff_front_right_signal\nuint16 cliff_right_signal\nuint8 user_digital_inputs\nuint16 user_analog_input\nuint8 charging_sources_available\nuint8 oi_mode\nuint8 song_number\nbool song_playing\n\nuint8 number_of_stream_packets\nint16 requested_velocity  # mm/s\nint16 requested_radius  # mm\nint16 requested_right_velocity  # mm/s\nint16 requested_left_velocity  # mm/s\n\n";
  static final byte OI_MODE_OFF = 0;
  static final byte OI_MODE_PASSIVE = 1;
  static final byte OI_MODE_SAFE = 2;
  static final byte OI_MODE_FULL = 3;
  static final byte REMOTE_LEFT = -127;
  static final byte REMOTE_FORWARD = -126;
  static final byte REMOTE_RIGHT = -125;
  static final byte REMOTE_SPOT = -124;
  static final byte REMOTE_MAX = -123;
  static final byte REMOTE_SMALL = -122;
  static final byte REMOTE_MEDIUM = -121;
  static final byte REMOTE_LARGE = -120;
  static final byte REMOTE_CLEAN = -120;
  static final byte REMOTE_PAUSE = -119;
  static final byte REMOTE_POWER = -118;
  static final byte REMOTE_ARC_LEFT = -117;
  static final byte REMOTE_ARC_RIGHT = -116;
  static final byte REMOTE_DRIVE_STOP = -115;
  static final byte REMOTE_SEND_ALL = -114;
  static final byte REMOTE_SEEK_DOCK = -113;
  static final byte REMOTE_RESERVED = -16;
  static final byte REMOTE_FORCE_FIELD = -14;
  static final byte REMOTE_GREEN_BUOY = -12;
  static final byte REMOTE_GREEN_BUOY_AND_FORCE_FIELD = -10;
  static final byte REMOTE_RED_BUOY = -8;
  static final byte REMOTE_RED_BUOY_AND_FORCE_FIELD = -6;
  static final byte REMOTE_RED_BUOY_AND_GREEN_BUOY = -4;
  static final byte REMOTE_RED_BUOY_AND_GREEN_BUOY_AND_FORCE_FIELD = -2;
  static final byte REMOTE_NONE = -1;
  static final byte CHARGING_NOT_CHARGING = 0;
  static final byte CHARGING_CHARGING_RECOVERY = 1;
  static final byte CHARGING_CHARGING = 2;
  static final byte CHARGING_TRICKLE_CHARGING = 3;
  static final byte CHARGING_WAITING = 4;
  static final byte CHARGING_CHARGING_ERROR = 5;
  std_msgs.Header getHeader();
  void setHeader(std_msgs.Header value);
  byte getBumpsWheeldrops();
  void setBumpsWheeldrops(byte value);
  boolean getWall();
  void setWall(boolean value);
  boolean getCliffLeft();
  void setCliffLeft(boolean value);
  boolean getCliffFrontLeft();
  void setCliffFrontLeft(boolean value);
  boolean getCliffFrontRight();
  void setCliffFrontRight(boolean value);
  boolean getCliffRight();
  void setCliffRight(boolean value);
  boolean getVirtualWall();
  void setVirtualWall(boolean value);
  byte getMotorOvercurrents();
  void setMotorOvercurrents(byte value);
  byte getDirtDetectorLeft();
  void setDirtDetectorLeft(byte value);
  byte getDirtDetectorRight();
  void setDirtDetectorRight(byte value);
  byte getRemoteOpcode();
  void setRemoteOpcode(byte value);
  byte getButtons();
  void setButtons(byte value);
  short getDistance();
  void setDistance(short value);
  short getAngle();
  void setAngle(short value);
  byte getChargingState();
  void setChargingState(byte value);
  short getVoltage();
  void setVoltage(short value);
  short getCurrent();
  void setCurrent(short value);
  byte getTemperature();
  void setTemperature(byte value);
  short getCharge();
  void setCharge(short value);
  short getCapacity();
  void setCapacity(short value);
  short getWallSignal();
  void setWallSignal(short value);
  short getCliffLeftSignal();
  void setCliffLeftSignal(short value);
  short getCliffFrontLeftSignal();
  void setCliffFrontLeftSignal(short value);
  short getCliffFrontRightSignal();
  void setCliffFrontRightSignal(short value);
  short getCliffRightSignal();
  void setCliffRightSignal(short value);
  byte getUserDigitalInputs();
  void setUserDigitalInputs(byte value);
  short getUserAnalogInput();
  void setUserAnalogInput(short value);
  byte getChargingSourcesAvailable();
  void setChargingSourcesAvailable(byte value);
  byte getOiMode();
  void setOiMode(byte value);
  byte getSongNumber();
  void setSongNumber(byte value);
  boolean getSongPlaying();
  void setSongPlaying(boolean value);
  byte getNumberOfStreamPackets();
  void setNumberOfStreamPackets(byte value);
  short getRequestedVelocity();
  void setRequestedVelocity(short value);
  short getRequestedRadius();
  void setRequestedRadius(short value);
  short getRequestedRightVelocity();
  void setRequestedRightVelocity(short value);
  short getRequestedLeftVelocity();
  void setRequestedLeftVelocity(short value);
}
