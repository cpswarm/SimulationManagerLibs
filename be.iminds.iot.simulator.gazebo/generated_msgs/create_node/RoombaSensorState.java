package create_node;

public interface RoombaSensorState extends org.ros.internal.message.Message {
  static final java.lang.String _TYPE = "create_node/RoombaSensorState";
  static final java.lang.String _DEFINITION = "Header header\n\nuint8 CHARGING_NOT_CHARGING = 0\nuint8 CHARGING_CHARGING_RECOVERY = 1\nuint8 CHARGING_CHARGING = 2\nuint8 CHARGING_TRICKLE_CHARGING = 3\nuint8 CHARGING_WAITING = 4 \nuint8 CHARGING_CHARGING_ERROR = 5\n\nuint8 bumps_wheeldrops\nbool wall\nbool cliff_left\nbool cliff_front_left\nbool cliff_front_right\nbool cliff_right\nbool virtual_wall\nuint8 motor_overcurrents\nuint8 dirt_detector_left  #roomba_only\nuint8 dirt_detector_right #roomba_only\nuint8 remote_opcode\nuint8 buttons\nint16 distance  # mm\nint16 angle # degrees\nuint8 charging_state\nuint16 voltage  # mV\nint16 current  # mA\nint8 temperature  # C\nuint16 charge  # mAh\nuint16 capacity  # mAh\n";
  static final byte CHARGING_NOT_CHARGING = 0;
  static final byte CHARGING_CHARGING_RECOVERY = 1;
  static final byte CHARGING_CHARGING = 2;
  static final byte CHARGING_TRICKLE_CHARGING = 3;
  static final byte CHARGING_WAITING = 4;
  static final byte CHARGING_CHARGING_ERROR = 5;
  std_msgs.Header getHeader();
  void setHeader(std_msgs.Header value);
  byte getBumpsWheeldrops();
  void setBumpsWheeldrops(byte value);
  boolean getWall();
  void setWall(boolean value);
  boolean getCliffLeft();
  void setCliffLeft(boolean value);
  boolean getCliffFrontLeft();
  void setCliffFrontLeft(boolean value);
  boolean getCliffFrontRight();
  void setCliffFrontRight(boolean value);
  boolean getCliffRight();
  void setCliffRight(boolean value);
  boolean getVirtualWall();
  void setVirtualWall(boolean value);
  byte getMotorOvercurrents();
  void setMotorOvercurrents(byte value);
  byte getDirtDetectorLeft();
  void setDirtDetectorLeft(byte value);
  byte getDirtDetectorRight();
  void setDirtDetectorRight(byte value);
  byte getRemoteOpcode();
  void setRemoteOpcode(byte value);
  byte getButtons();
  void setButtons(byte value);
  short getDistance();
  void setDistance(short value);
  short getAngle();
  void setAngle(short value);
  byte getChargingState();
  void setChargingState(byte value);
  short getVoltage();
  void setVoltage(short value);
  short getCurrent();
  void setCurrent(short value);
  byte getTemperature();
  void setTemperature(byte value);
  short getCharge();
  void setCharge(short value);
  short getCapacity();
  void setCapacity(short value);
}
